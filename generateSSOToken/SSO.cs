using System;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

namespace generateSSOToken
{
    /// <summary>
    /// Used to get SBM SSO Token
    /// </summary>
    public class SSO : IDisposable
    {
        private const string UserAgent = @"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36";
        private readonly string _ssoToken;

        /// <summary>
        /// Initializes a new instance of the <see cref="SSO"/> class.
        /// </summary>
        /// <param name="hostname">hostname</param>
        /// <param name="loginId">User loginId, like kaci, sam, admin</param>
        /// <param name="password">password</param>
        /// <param name="isBase64">true - base64, false - xml</param>
        /// <param name="ssoPort">SSO Port, default: 8085</param>
        /// <param name="ssoHostname"></param>
        public SSO(string hostname, string loginId, string password, bool isBase64 = true, string ssoPort = "8085", string ssoHostname = null)
        {
            _ssoToken = GetSSO(hostname, ssoHostname, ssoPort, loginId, password, isBase64);
        }

        /// <summary>
        /// Returns encoded SSOToken
        /// </summary>
        /// <returns></returns>
        public string Get()
        {
            return _ssoToken;
        }

        /// <summary>
        /// Gets the opaque and SID that are generated by SBM. These values required for getting SBM SSO Token.
        /// </summary>
        /// <param name="hostname">hostname</param>
        /// <param name="sid">SID</param>
        /// <param name="opaque">opaque</param>
        /// <exception cref="System.Net.WebException">
        /// You have provided following hostname: ' + hostname + '\n + e.Message
        /// or
        /// SSO: Cannot get repsponse from request
        /// </exception>
        /// <exception cref="System.Exception">SSO: Cannot get repsponse from request
        /// or
        /// SSO: Failed to get opaque or sid value</exception>
        private void GetOpaqueAndSID(string hostname, ref string sid, ref string fsid, ref string opaque)
        {
            var urlSBM = string.Format(@"http://{0}/tmtrack/tmtrack.dll?", hostname);

            ServicePointManager.Expect100Continue = false; //speed-up WebReq
            var myHttpWebRequest = (HttpWebRequest)WebRequest.Create(urlSBM);
            myHttpWebRequest.Proxy = null; //speed-up WebReq, do not autodetect Proxy
            myHttpWebRequest.UserAgent = UserAgent;
            myHttpWebRequest.ReadWriteTimeout = 30000;
            myHttpWebRequest.Timeout = 25000; 

            HttpWebResponse myHttpWebResponse;
            try
            {
                myHttpWebResponse = (HttpWebResponse) myHttpWebRequest.GetResponse();
            }
            catch (Exception e)
            {
                //default exception not always contains hostname value
                throw new WebException("You have provided following hostname: '" + hostname + "'\n" + e.Message);
            }

            var streamResponse = myHttpWebResponse.GetResponseStream();
            if (streamResponse == null)
                throw new WebException("SSO: Cannot get repsponse from request");
            //Should work with simpler algorithm of reading:
            var streamRead = new StreamReader(streamResponse);
            var respStr = streamRead.ReadToEnd();
            var respArr = respStr.Split(Environment.NewLine.ToCharArray());

            // Release the response object resources.
            streamRead.Close();
            streamResponse.Close();
            myHttpWebResponse.Close();


            //todo: can we convert html response into some jQuery object or so and look for required value?
            for (int i = 0; i < respArr.Length && (sid == null || opaque == null); i++)
            {
                var l = respArr[i];
                if (sid == null && l.Contains("sid="))
                {
                    var m = Regex.Match(l, @"action=(['""]).*?sid=(.*?)(\1|&)");
                    if (l.Contains("fsid="))
                        fsid = m.Groups[2].Value;
                    else
                        sid = m.Groups[2].Value;
                }
                if (opaque == null && l.Contains("name=\"opaque\""))
                {
                    var m = Regex.Match(l, @"value=(['""])(.+?)\1");
                    opaque = m.Groups[2].Value;
                }
            }
            if ((sid == null && fsid == null) || opaque == null)
                throw new Exception("SSO: Failed to get opaque or (f)sid value");
        }

        /// <summary>
        /// Gets SSO Token.
        /// </summary>
        /// <param name="hostname">The hostname.</param>
        /// <param name="ssoHostname">sso hostname</param>
        /// <param name="ssoPort"></param>
        /// <param name="loginId">User loginId, like kaci, sam, admin</param>
        /// <param name="password">password</param>
        /// <param name="isBase64"></param>
        /// <returns>
        /// encoded SSO Token
        /// </returns>
        /// <exception cref="System.Exception">SSO: response doesn't contain 'RequestSecurityTokenResponse'.\nResponse:  + responseArr
        /// or
        /// SSO: Cannot find //saml:Assertion in provided XML. xml:\n + tokenLine</exception>
        private string GetSSO(string hostname, string ssoHostname, string ssoPort, string loginId, string password, bool isBase64)
        {
            string sid = null, fsid = null, opaque = null; //both should be null
            //we need SBM to generate SID and opaque values so we can proceed
            GetOpaqueAndSID(hostname, ref sid, ref fsid, ref opaque);

            var sidType = sid == null ? "fsid" : "sid";
            var hostPort = hostname.Split(':');
            string host = hostPort[0];
            string port = string.Empty;
            string doubleDot = string.Empty;
            if (hostPort.Length > 1)
            {
                port = hostPort[1];
                doubleDot = "%3A";
            }
            if (ssoHostname == null)
                ssoHostname = host;

            var url = string.Format("http://{5}:{4}/idp/login?{7}={1}{6}&continue=http%3A%2F%2F{0}{2}{3}%2Ftmtrack%2Ftmtrack.dll%3F", host, sid, doubleDot, port, ssoPort, ssoHostname, fsid, sidType);

            var webClient = new WebClient {Proxy = null };
            webClient.Headers.Add("user-agent", UserAgent);

            var formData = new NameValueCollection();
            formData["username"] = loginId;
            formData["password"] = password;
            formData["opaque"] = opaque;
            formData["logintype"] = "1";

            byte[] responseBytes = webClient.UploadValues(url, "POST", formData);

            webClient.Dispose();

            var responseStr = Encoding.UTF8.GetString(responseBytes);
            var responseArr = responseStr.Split(Environment.NewLine.ToCharArray());
            
            //todo: can we convert html response into some jQuery object or so and look for required value?
            string tokenLine = null;
            for (int index = 0; index < responseArr.Length && tokenLine == null; index++)
            {
                var l = responseArr[index];
                if (l.Contains("RequestSecurityTokenResponse"))
                {
                    tokenLine = l.Replace('+', ' ');
                    //regex returns 'sso xml' (value="sso xml")
                    var m = Regex.Match(tokenLine, @"value=(['""])(.+?)\1");
                    tokenLine = m.Groups[2].Value;
                    tokenLine = Uri.UnescapeDataString(tokenLine); //need to get rid of html formatting, like %3F and so on
                }
            }

            if (tokenLine == null)
                throw new Exception("SSO: response doesn't contain 'RequestSecurityTokenResponse'.\nPossible reasons:\n" +
                                    "1) User or password is incorrect.\n" +
                                    "2) SBM is dead.\n" +
                                    "3) SSOToken generation no longer works.\n");

            //convert value to XML
            var xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(tokenLine);

            //we need to add namespace in order to be able to look for saml: nodes
            var nsmgr = new XmlNamespaceManager(xmlDoc.NameTable);
            nsmgr.AddNamespace("saml", "urn:oasis:names:tc:SAML:1.0:assertion");
            //get node with required for SSO
            var token = xmlDoc.SelectSingleNode("//saml:Assertion", nsmgr);
            if (token == null)
                throw new Exception("SSO: Cannot find //saml:Assertion in provided XML. xml:\n" + tokenLine);
            
            if (!isBase64)
                return token.OuterXml;

            var bytes = Encoding.UTF8.GetBytes(token.OuterXml);
            var ssoBase64 = Convert.ToBase64String(bytes);
            return ssoBase64;
        }

        public void Dispose()
        {
            
        }
    }
}
